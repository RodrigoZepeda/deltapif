% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/05-covariance_generics.R
\name{cov_total_pif}
\alias{cov_total_pif}
\alias{covcor}
\alias{cov}
\alias{var}
\alias{sd}
\alias{cor}
\title{Colink_variance function for a \code{pif_total_class}}
\usage{
cov_total_pif(
  pif1,
  pif2,
  sigma_p = NULL,
  sigma_beta = NULL,
  independent_p = "guess",
  independent_beta = "guess",
  quiet = FALSE
)

cov(
  x,
  ...,
  sigma_p = NULL,
  sigma_beta = NULL,
  independent_p = "guess",
  independent_beta = "guess",
  quiet = FALSE
)

var(x, ...)

sd(x, ...)

cor(
  x,
  ...,
  sigma_p = NULL,
  sigma_beta = NULL,
  independent_p = "guess",
  independent_beta = "guess",
  quiet = FALSE
)
}
\arguments{
\item{pif1}{Either a \code{pif_atomic_class} or a \code{pif_total_class}}

\item{pif2}{Either a \code{pif_atomic_class} or a \code{pif_total_class}}

\item{sigma_p}{Colink_variance matrix for the prevalences in all \code{pif1} and
the ones included in \code{...}.}

\item{sigma_beta}{Colink_variance matrix for the parameter \code{beta} in all \code{pif1}
and the ones included in \code{...}.}

\item{independent_p}{If all the pifs share the same prevalence data. Either
\code{TRUE}, \code{FALSE}, \code{guess} (default) or a matrix. If a matrix is given then
\code{independent_p[i,j] = 1} if the i-th and j-th pifs share the same prevalence data
\code{independent_p[i,j] = 0} if the i-th and j-th pifs don't share the same prevalence data.}

\item{independent_beta}{If all the pifs share the same \code{beta} parameter. Either
\code{TRUE}, \code{FALSE} or \code{guess} (default) or a matrix. If a matrix is given then
\code{independent_beta[i,j] = 1} if the i-th and j-th pifs share the same relative risk parameters
\code{independent_beta[i,j] = 0} if the i-th and j-th pifs don't share the same relative risk parameters.}

\item{quiet}{Whether to throw warnings and other messages}

\item{x}{A potential impact fraction}

\item{...}{Multiple additional potential impact fraction objects
separated by commas.}
}
\description{
Recursively obtains the colink_variance matrix of a \code{pif_total_class}

Computes the colink_variance (\code{cov}) or correlation (\code{cor}) for multiple
potential impact fractions and the link_variance \code{var} and standard deviation
\code{sd}for a potential impact fraction.
}
\examples{
# Get the approximate link_variance of a pif object
my_pif <- pif(p = 0.5, p_cft = 0.25, beta = 1.3, sigma_p = 0.1, sigma_beta = 0.2)
var(my_pif)

# This is the same as colink_variance with just 1 pIF
cov(my_pif)

# Calculate the colink_variance between 3 fractions with shared relative risk
beta <- 0.3
sigma_beta <- 0.1
pif1 <- pif(0.5, 0.2, beta, sigma_p = 0.5 * (1 - 0.5) / 100, sigma_beta = sigma_beta)
pif2 <- pif(0.3, 0.1, beta, sigma_p = 0.3 * (1 - 0.3) / 100, sigma_beta = sigma_beta)
pif3 <- pif(0.7, 0.3, beta, sigma_p = 0.7 * (1 - 0.7) / 100, sigma_beta = sigma_beta)
cov(pif1, pif2, pif3, independent_beta = FALSE)

# The colink_variance between a pif and itself only has the link_variance as entries
cov(pif1, pif1, independent_beta = FALSE, independent_p = FALSE)

# Or if there is a colink_variance structure between different betas you can specify with
# sigma_beta in the colink_variance
betas <- c(1.3, 1.2, 1.27)

# Colink_variance among all betas
sigma_beta <- matrix(c(
  1.0000000, -0.12123053, 0.35429369,
  -0.1212305, 1.00000000, -0.04266409,
  0.3542937, -0.04266409, 1.00000000
), byrow = TRUE, ncol = 3)
pif1 <- pif(0.5, 0.2, betas[1], sigma_p = 0.5 * (1 - 0.5) / 100, sigma_beta = sigma_beta[1, 1])
pif2 <- pif(0.3, 0.1, betas[2], sigma_p = 0.3 * (1 - 0.3) / 100, sigma_beta = sigma_beta[2, 2])
pif3 <- pif(0.3, 0.1, betas[3], sigma_p = 0.3 * (1 - 0.3) / 100, sigma_beta = sigma_beta[3, 3])
cov(pif1, pif2, pif3, sigma_beta = sigma_beta)

# Compute the correlation
cor(pif1, pif2, pif3, sigma_beta = sigma_beta, quiet = TRUE)
}
\keyword{internal}
