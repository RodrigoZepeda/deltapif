% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01-classes.R
\name{classes}
\alias{classes}
\alias{pif_class}
\alias{pif_atomic_class}
\alias{pif_global_ensemble_class}
\alias{pif_total_class}
\alias{pif_ensemble_class}
\title{Potential Impact Fraction related classes}
\usage{
pif_class(
  pif = integer(0),
  variance = integer(0),
  conf_level = integer(0),
  type = "PIF",
  link = function() NULL,
  link_inv = function() NULL,
  link_deriv = function() NULL
)

pif_atomic_class(
  p,
  p_cft,
  beta,
  var_p,
  var_beta,
  rr_link,
  rr_link_deriv,
  link,
  link_deriv,
  link_inv,
  conf_level,
  type,
  upper_bound_p,
  upper_bound_beta
)

pif_global_ensemble_class(
  pif_list,
  pif_weights,
  sigma_pif_weights,
  conf_level = 0.95,
  pif_transform,
  pif_deriv_transform,
  pif_inverse_transform,
  link,
  link_inv,
  link_deriv
)

pif_total_class(
  pif_list,
  pif_weights,
  sigma_pif_weights,
  link,
  link_inv,
  link_deriv,
  conf_level = 0.95
)

pif_ensemble_class(
  pif_list,
  pif_weights,
  sigma_pif_weights,
  link,
  link_inv,
  link_deriv,
  conf_level = 0.95
)
}
\arguments{
\item{pif}{Potential Impact Fraction estimate}

\item{variance}{variance estimate for the potential impact fraction (i.e.
for \code{pif})}

\item{conf_level}{Confidence level for the confidence interval (default 0.95).}

\item{type}{Character either Potential Impact Fraction (\code{PIF}) or
Population Attributable Fraction (\code{PAF})}

\item{link}{Link function such that the \code{pif} confidence intervals
stays within the expected bounds.}

\item{link_inv}{The inverse of \code{link}. For example if \code{link}
is \code{logit} this should be \code{inv_logit}.}

\item{link_deriv}{The derivative of \code{link}. For example if \code{link}
is \code{logit} this should be \code{deriv_logit} (i.e. \code{function(pif) 1 / (pif * (1 - pif))}).}

\item{p}{Prevalence (proportion) of the exposed individuals for
each of the \code{N} exposure levels.}

\item{p_cft}{Counterfactual prevalence (proportion) of the exposed
individuals for each of the \code{N} exposure levels.}

\item{beta}{Relative risk parameter for which standard deviation is
available (usually its either the relative risk directly or the log
of the relative risk as most RRs, ORs and HRs come from exponential
models).}

\item{var_p}{Estimate of the colink_variance matrix of \code{p} where the entry
\code{var_p[i,j]} represents the colink_variance between \code{p[i]} and \code{p[j]}.}

\item{var_beta}{Estimate of the colink_variance matrix of \code{beta} where the entry
\code{var_beta[i,j]} represents the colink_variance between \code{beta[i]} and \code{beta[j]}.}

\item{rr_link}{Link function such that the relative risk is given by
\code{rr_link(beta)}.}

\item{rr_link_deriv}{Derivative of the link function for the relative risk.
The constructor tries to build it automatically from \code{rr_link} using
\code{\link[Deriv:Deriv]{Deriv::Deriv()}}.}

\item{upper_bound_p}{Whether the values for the \code{p} component
of the link_variance should be approximated by an upper bound.}

\item{upper_bound_beta}{Whether the values for the \code{beta} component
of the link_variance should be approximated by an upper bound.}

\item{pif_list}{A list of potential impact fractions \code{pif_class} so that
the total can be computed from it.}

\item{pif_weights}{pif_weights for calculating the total PIF (respectively PAF)
in \code{pif_total}.}

\item{sigma_pif_weights}{Colink_variance matrix for the pif_weights when calculating the
total PIF (respectively PAF) in \code{pif_total}.}

\item{pif_transform}{Transform applied to the \code{pif} for summation
in a \code{pif_global_ensemble_class} (see section below).}

\item{pif_deriv_transform}{Derivative of the transform applied to the
\code{pif} for summation in a \code{pif_global_ensemble_class} (see section below).}

\item{pif_inverse_transform}{Inverse of the transform applied to the
\code{pif} for summation in a \code{pif_global_ensemble_class} (see section below).}
}
\description{
Objects for handling potential impact fractions for a categorical exposure
considering an observed prevalence of  \code{p} and a relative risk
(or relative risk parameter) of \code{beta}.
}
\section{Properties of a  \code{pif_class}}{

Any object that is a \code{pif_class} contains a potential impact fraction
with intervals estimated as follows:
\deqn{
 \text{CI}_{\text{Link}} = \text{link}\big(\text{PIF}\big) \pm Z_{\alpha/2}\cdot\sqrt{\textrm{link\_variance}}
}
and then transformed back using the inverse of the link function \code{inv_link}:
\deqn{
 \text{CI}_{\text{PIF}} = \text{link}^{-1}\Big(\text{CI}_{\text{Link}}\Big)
}

The following are the properties of any \code{pif_class}
\describe{
\item{\code{ci}}{\code{numeric(2)} — Lower and upper confidence limits at level \code{conf_level}.}
\item{\code{link_vals}}{\code{numeric} — Entrywise evaluation of the link function at pif: \code{link(pif)}.}
\item{\code{link_deriv_vals}}{\code{character} — Entrywise evaluation of the derivative of the link function (\code{link_deriv}) at pif: \code{link(pif)}.}
\item{\code{link_variance}}{\code{numeric} - Estimate for the linked potential impact fraction's variance: \code{variance(link(pif))}.}
}
}

\section{Properties of a  \code{pif_atomic_class}}{


The \code{pif_atomic_class} is a type of \code{pif_class} that contains enough
information to compute a potential impact fraction
through the classic formula by Walter:
\deqn{
 \textrm{PIF} = \dfrac{
   \sum\limits_{i=1}^N p_i \text{RR}_i - \sum\limits_{i=1}^N p_i^{\text{cft}} \text{RR}_i
  }{
   \sum\limits_{i=1}^N p_i \text{RR}_i
  }
}
where the relative risk is a function of a parameter \eqn{\beta_i}
\deqn{
 \text{RR}_i = \text{rr\_link}(\beta_i)
}

The \code{pif_atomic_class} inherits the properties of a \code{pif_class} as well as:
\describe{
\item{\code{mu_obs}}{\code{numeric} — Average relative risk in the observed population.}
\item{\code{mu_cft}}{\code{numeric} — Average relative risk in the counterfactual population.}
\item{\code{pif}}{\code{numeric} — Estimate of the potential impact fraction.}
\item{\code{rr_link_deriv_vals}}{\code{character} — Entrywise evaluation of the derivative of the link function (\code{link_deriv}) at pif: \code{link(pif)}.}
}

Confidence intervals are estimated as with any \code{pif_class}.
}

\section{Properties of a  \code{pif_global_ensemble_class}}{


The \code{pif_global_ensemble_class} creates a new potential impact
fraction by summing a weighted combination of potential
impact fractions. In general it computes the following expression:
\deqn{
\textrm{PIF}_{\text{global}} =
 g^{-1}\bigg( \sum\limits_{i = 1}^{N} g\big(w_i \cdot \textrm{PIF}_i\big) \bigg)
}
where \eqn{g} is refered to as the \code{pif_transform}, its derivative the
\code{pif_deriv_transform}, and its inverse \code{pif_inverse_transform}.

The \code{pif_global_ensemble_class} inherits the properties of a \code{pif_class} as well as:
\describe{
\item{\code{pif_weights}}{\code{numeric} - Vector of weights \eqn{w_i} for weighting the potential impact fraction.}
\item{\code{sigma_pif_weights}}{\code{numeric} - Covariance matrix for the \code{pif_weights}}
\item{\code{pif_transform}}{\code{function} - Function \eqn{g} with which to transform the impact fraction before weighting.}
\item{\code{pif_deriv_transform}}{\code{function} - Derivative of the \code{pif_transform}.}
\item{\code{pif_inverse_transform}}{\code{function} - Inverse of the \code{pif_transform}.}
\item{\code{type}}{\code{character} - Whether the quantity represents a \code{PIF} or a \code{PAF}}
\item{\code{coefs}}{\code{numeric} - Potential impact fractions used for the global ensemble (each of the \eqn{\text{PIF}_i}.}
\item{\code{sum_transformed_weighted_coefs}}{\code{numeric} - Sum of the potential impact fractions involved \eqn{\sum g(w_i \text{PIF}_i)}.}
\item{\code{pif}}{\code{numeric} — Estimate of the potential impact fraction.}
\item{\code{covariance}}{\code{numeric} — Covariance matrix between the potential impact fractions in \code{coefs} (i.e. each entry is\eqn{\text{Cov}(\text{PIF}_i, \text{PIF}_j))}}
\item{\code{variance}}{\code{numeric} — Estimate for the variance of \code{pif}.}
}

Confidence intervals are estimated as with any \code{pif_class}.
}

\section{Properties of a  \code{pif_total_class}}{


A \code{pif_total_class} estimated the potential impact fraction of the
weighted sum of fractions from different (disjoint) dispopulations:
\deqn{
 \textrm{PIF}_{Total} = \sum\limits_{i = 1}^{N} w_i \cdot \textrm{PIF}_i
}
with \eqn{w_i} representing the proportions of individuals in each category.
This is a type of \code{pif_global_ensemble_class} with \code{pif_transform = identity}.
}

\section{Properties of a  \code{pif_ensemble_class}}{


The ensemble potential impact fraction (representing different relative risks)
for the same outcome is given by the weighted product:
\deqn{
\textrm{PIF}_{Ensemble} = 1 - \prod\limits_{i = 1}^{N} \Big(1 - w_i \textrm{PIF}_i\Big)
}

However it can be transformed into a \code{pif_global_ensemble_class} by
taking the log-complement:
\deqn{
\ln\Big(1 - \textrm{PIF}_{Ensemble}\Big) =  \sum\limits_{i = 1}^{N} \ln\big(1 - w_i \textrm{PIF}_i\big)
}
hence it is a  \code{pif_global_ensemble_class} with \code{pif_transform = log_complement}.
}

\examples{
#Create a new pif parent class element
pif_class(pif = 0.3, variance = 0.01, conf_level = 0.95, type = "PIF",
  link = logit, link_inv = inv_logit, link_deriv = deriv_logit)

#Create a new potential impact fraction from the Walter's formula
pif_atomic_class(
  p = 0.499, p_cft = 0, beta = 3.6, var_p = 0.1, var_beta = 3,
  link = logit, link_inv = inv_logit, link_deriv = deriv_logit,
  rr_link = identity, rr_link_deriv = function(x) 1,
  conf_level = 0.95, type = "PAF",
  upper_bound_p = FALSE,
  upper_bound_beta = FALSE
)

#Create a list of pif
pif1 <- pif_atomic_class(
  p = 0.499, p_cft = 0, beta = 3.6, var_p = 0.01, var_beta = 0.03,
  link = logit, link_inv = inv_logit, link_deriv = deriv_logit,
  rr_link = identity, rr_link_deriv = function(x) 1,
  conf_level = 0.95, type = "PAF",
  upper_bound_p = FALSE,
  upper_bound_beta = FALSE
)
pif2 <- pif_atomic_class(
  p = 0.79, p_cft = 0, beta = 3.6, var_p = 0.01, var_beta = 0.03,
  link = logit, link_inv = inv_logit, link_deriv = deriv_logit,
  rr_link = identity, rr_link_deriv = function(x) 1,
  conf_level = 0.95, type = "PAF",
  upper_bound_p = FALSE,
  upper_bound_beta = FALSE
)
pif3 <- pif_atomic_class(
  p = 0.8, p_cft = 0, beta = 3.6, var_p = 0.01, var_beta = 0.03,
  link = logit, link_inv = inv_logit, link_deriv = deriv_logit,
  rr_link = identity, rr_link_deriv = function(x) 1,
  conf_level = 0.95, type = "PAF",
  upper_bound_p = FALSE,
  upper_bound_beta = FALSE
)

tp1 <- pif_total_class(pif_list = list(pif1, pif2),
  pif_weights = c(0.5, 0.2), sigma_pif_weights = diag(0.001, ncol = 2, nrow = 2),
  link = identity, link_inv = identity, link_deriv = identity)

pif_total_class(pif_list = list(tp1, pif3),
  pif_weights = c(0.7, 0.3), sigma_pif_weights = diag(0.001, ncol = 2, nrow = 2),
  link = identity, link_inv = identity, link_deriv = identity)
}
