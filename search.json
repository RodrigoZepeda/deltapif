[{"path":"https://rodrigozepeda.github.io/deltapif/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 PIFCI authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/articles/Introduction.html","id":"example-1-a-potential-impact-fraction","dir":"Articles","previous_headings":"","what":"Example 1: A potential impact fraction","title":"Introduction","text":"article (1) discusses population attributable fraction (PAF) dementia associated 12 different risk factors US adults. also estimates potential impact fraction correspondent 15% reduction exposures factors. dataset dementiarisk contains relative risk dementia different exposures well prevalence exposure total population different subpopulations (races): show calculate potential impact fraction population attributable fraction smoking among 4 subpopulations (race groups) calculate total attributable fraction. purpose choose smoking log relative risk beta = 0.4637340 variance var_beta = 0.0273858 (= 0.165486566^2). Among hispanic individuals 6.9% (p = 0.069) smoke. Hence paf : Note model throws warning us specifying variance var_p. assume value perfectly estimated associated variance thus setting var_p = 0: coef, confint, summary, .data.frame functions extended allow user extract information paf (pif): fractions can computed way noting 4.9 non-hispanic asians, 11.7 non-hispanic blacks 8.4 non-hispanic whites smoke: Correlations (correlation) covariances (covariance) can also calculated multiple paf objects: can calculate total population attributable fraction combining fractions subpopulations weighted proportion population. According Wikipedia distribution 2020 follows: paf_total function computes aggregated paf whole population:","code":"data(dementiarisk) #>            risk_factor     logrr       sdlog total hispanic asian black white #> 1       Less education 0.4637340 0.119140710  10.7     27.1   6.4  10.6   5.5 #> 2         Hearing loss 0.6626880 0.174038430  10.8     13.1   6.9   6.5  10.6 #> 3                  TBI 0.6097656 0.090990178  17.1     10.3   6.0   9.2  20.1 #> 4         Hypertension 0.4762342 0.167874478  42.2     38.5  38.5  61.0  39.8 #> 5    Excessive alcohol 0.1655144 0.054020949   3.6      2.0   0.7   2.7   4.2 #> 6              Obesity 0.4700036 0.091750556  44.0     48.3  14.6  54.3  43.5 #> 7              Smoking 0.4637340 0.165486566   8.5      6.9   4.9  11.7   8.4 #> 8           Depression 0.6418539 0.103984905   7.4     10.7   4.3   6.6   7.2 #> 9     Social isolation 0.4510756 0.086112272  11.9     24.0   8.0  12.1  10.8 #> 10 Physical inactivity 0.3293037 0.092961816  62.8     68.6  56.6  73.2  61.3 #> 11            Diabetes 0.4317824 0.075776055  28.6     41.0  44.1  37.2  25.4 #> 12       Air pollution 0.0861777 0.009362766  22.8     44.4  55.2  41.3  17.2 paf_hispanic <- paf(p = 0.069, beta = 0.4637340, var_beta = 0.0273858,                      rr_link = exp) #> ! Assuming parameters `p` have no variance Use `var_p` to input their link_variances and/or covariance paf_hispanic <- paf(p = 0.069, beta = 0.4637340, var_beta = 0.0273858,                      var_p = 0, rr_link = exp) paf_hispanic #>  #> ── Population Attributable Fraction ── #>  #> PAF = 3.912% [95% CI: 0.569% to 7.142%] #> standard_deviation(paf %) = 1.676 #> standard_deviation(link(paf)) = 0.017 as.data.frame(paf_hispanic) #>          PAF standard_deviation      ci_low      ci_up confidence #> 1 0.03911752         0.01676291 0.005694675 0.07141689       0.95 paf_asian <- paf(p = 0.049, beta = 0.4637340, var_beta = 0.0273858,                      var_p = 0, rr_link = exp) paf_black <- paf(p = 0.117, beta = 0.4637340, var_beta = 0.0273858,                      var_p = 0, rr_link = exp) paf_white <- paf(p = 0.084, beta = 0.4637340, var_beta = 0.0273858,                      var_p = 0, rr_link = exp) covariance(paf_white, paf_hispanic, paf_asian, paf_black) #>              [,1]         [,2]         [,3]         [,4] #> [1,] 0.0004025772 0.0003363365 0.0002443575 0.0005404935 #> [2,] 0.0003363365 0.0002809952 0.0002041506 0.0004515599 #> [3,] 0.0002443575 0.0002041506 0.0001483209 0.0003280704 #> [4,] 0.0005404935 0.0004515599 0.0003280704 0.0007256577 weights <- c(\"white\" = 0.5784, \"hispanic\" = 0.1873, \"black\" = 0.1205, \"asian\" = 0.0592)  #Normalized weights to sum to 1 weights <- weights / sum(weights) paf_total(paf_white, paf_hispanic, paf_black, paf_asian, weights = weights, sigma_weights = 0) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 4.663% [95% CI: 0.704% to 8.464%] #> standard_deviation(paf %) = 1.979 #> standard_deviation(link(paf)) = 0.021"},{"path":"https://rodrigozepeda.github.io/deltapif/articles/Introduction.html","id":"why-are-we-using-logrr","dir":"Articles","previous_headings":"Example 1: A potential impact fraction","what":"Why are we using logrr?","title":"Introduction","text":"common question case using logrr exponential link relative risks. reason depends standard deviation can properly recovered. Recall classic (Wald-type) confidence intervals distance point estimate (case RR) bounds. can see happen example case smoking RR 1.59 [1.15-2.20] : distances ! However log-scale much similar: implies uncertainty estimated log-scale hence need use log relative risk beta exponentiate (link = \"exponential\"). Mathematically explanation happens usually relative risks, odds ratios hazard ratios transformed log-scale estimate confidence intervals. can see Wikipedia, example, classic formulas relative risks CIs odds ratios involve log-transform.","code":"2.20 - 1.59 #> [1] 0.61 1.59 - 1.15 #> [1] 0.44 log(2.20) - log(1.59) #> [1] 0.3247233 log(1.59) - log(1.15) #> [1] 0.3239721"},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rodrigo Zepeda-Tello. Author, maintainer.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zepeda-Tello R (2025). deltapif: Estimate Potential Impact Population Attributable Fractions Aggregated Data. R package version 0.1.0, https://rodrigozepeda.github.io/deltapif/.","code":"@Manual{,   title = {deltapif: Estimate Potential Impact and Population Attributable Fractions with Aggregated Data},   author = {Rodrigo Zepeda-Tello},   year = {2025},   note = {R package version 0.1.0},   url = {https://rodrigozepeda.github.io/deltapif/}, }"},{"path":"https://rodrigozepeda.github.io/deltapif/index.html","id":"deltapif-","dir":"","previous_headings":"","what":"Estimate Potential Impact and Population Attributable Fractions with Aggregated Data","title":"Estimate Potential Impact and Population Attributable Fractions with Aggregated Data","text":"Calculate Potential Impact Fractions (PIF) Population Attributable Fractions (PAF) aggregated data confidence intervals using delta method.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate Potential Impact and Population Attributable Fractions with Aggregated Data","text":"can install development version deltapif :","code":"remotes::install_github(\"RodrigoZepeda/deltapif\")"},{"path":"https://rodrigozepeda.github.io/deltapif/index.html","id":"calculating-a-population-attributable-fraction","dir":"","previous_headings":"","what":"Calculating a population attributable fraction","title":"Estimate Potential Impact and Population Attributable Fractions with Aggregated Data","text":"estimate population attributable fraction two ingredients required: beta: relative risk value calculate relative risk (variance var_beta). p: exposure prevalence (variance var_p). case potential impact fractions also require: p_cft: counterfactual prevalence. Note important hypothesis current method relative risk estimate prevalence exposure independent sense estimated different populations studies. example Lee et al estimate attributable fraction smoking dementia. purpose report following: relative risk 1.59 (1.15, 2.20) exposure prevalence 8.5 can calculate point estimate PAF follows: Note follows formula Levin: \\[ \\textrm{PAF} = \\frac{p \\cdot (\\text{RR} - 1)}{1 + p \\cdot (\\text{RR} - 1)} \\] Additional examples show calculate PAF multiple categories.","code":"library(deltapif) paf(p = 0.085, beta = 1.59, quiet = TRUE) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 4.776% [95% CI: 4.776% to 4.776%] #> standard_deviation(paf %) = 0.000 #> standard_deviation(link(paf)) = 0.000"},{"path":"https://rodrigozepeda.github.io/deltapif/index.html","id":"adding-uncertainty","dir":"","previous_headings":"Calculating a population attributable fraction","what":"Adding uncertainty","title":"Estimate Potential Impact and Population Attributable Fractions with Aggregated Data","text":"Note uncertainty fraction inputed standard deviation relative risk. notice variance relative risk actually log relative risk. follow formula Cochrane’s handbook: \\[ \\text{variance}_{\\ln(\\text{RR})} = \\Bigg(\\frac{\\ln(\\text{upper limit}) - \\ln(\\text{lower limit})}{2\\times 1.95}\\Bigg)^2 \\] uncertainty specified log relative risk use natural logarithm ln 1.59 beta log(1.59) = 0.4637 specify way get relative risk exponential (exp) function. Finally uncertainty given p set var_p = 0.","code":"((log(2.20) - log(1.15)) / (2*1.95))^2 #> [1] 0.02766639 paf(p = 0.085, beta = 0.4637, var_beta = 0.02766639, var_p = 0, rr_link = exp) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 4.775% [95% CI: 0.695% to 8.688%] #> standard_deviation(paf %) = 2.038 #> standard_deviation(link(paf)) = 0.021"},{"path":"https://rodrigozepeda.github.io/deltapif/index.html","id":"calculating-a-potential-impact-fraction","dir":"","previous_headings":"","what":"Calculating a potential impact fraction","title":"Estimate Potential Impact and Population Attributable Fractions with Aggregated Data","text":"paper also considers potential impact fraction 15% reduction smoking can achieved pif function specifying counterfactual distribution (case 15% reduction results \\(0.085 \\times (1 - 0.15) = 0.07225\\)) Note PIF PAF result similar point estimates CIs Lee et al report: PAF: 4.9 (1.3-9.3) PIF: 0.7 (0.2-1.4)","code":"pif(p = 0.085, p_cft = 0.07225, beta = 0.4637, var_beta = 0.02766639, var_p = 0, rr_link = exp) #>  #> ── Potential Impact Fraction ── #>  #> PIF = 0.716% [95% CI: 0.115% to 1.314%] #> standard_deviation(pif %) = 0.306 #> standard_deviation(link(pif)) = 0.003"},{"path":"https://rodrigozepeda.github.io/deltapif/index.html","id":"more","dir":"","previous_headings":"","what":"More","title":"Estimate Potential Impact and Population Attributable Fractions with Aggregated Data","text":"Visit deltapif website examples additional operations can PIF.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/alcohol.html","id":null,"dir":"Reference","previous_headings":"","what":"Alcohol consumption in Australia from Pandeya et al — alcohol","title":"Alcohol consumption in Australia from Pandeya et al — alcohol","text":"Alcohol consumption among Australian adults grams/day","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/alcohol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alcohol consumption in Australia from Pandeya et al — alcohol","text":"","code":"alcohol"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/alcohol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Alcohol consumption in Australia from Pandeya et al — alcohol","text":"data frame 12 rows 11 columns: sex Whether individuals male female alcohol_g Category measure grams alcohol consumption median_intake median intake group age_18_24, age_25_34, age_35_44, age_45_54, age_55_64, age_65_74, age_75_plus, age_18_plus Proportion adults alcohol_g categories (age group).","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/alcohol.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Alcohol consumption in Australia from Pandeya et al — alcohol","text":"Pandeya, Nirmala, et al. \"Cancers Australia 2010 attributable consumption alcohol.\" Australian New Zealand journal public health 39.5 (2015): 408-413.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/as.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a pif object into a data.frame — as.data.frame","title":"Transform a pif object into a data.frame — as.data.frame","text":"Gets potential impact fraction value, link_variance confidence interval values","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/as.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a pif object into a data.frame — as.data.frame","text":"x pif_class object. ... Additional parameters (ignored)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/as.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a pif object into a data.frame — as.data.frame","text":"","code":"my_pif <- pif(p = 0.5, p_cft = 0.25, beta = 1.3, var_p = 0.1, var_beta = 0.2) as.data.frame(my_pif) #>          PIF standard_deviation     ci_low     ci_up confidence #> 1 0.06521739          0.1144269 -0.1882459 0.2646147       0.95"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/cancer_rr.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative risks for cancer from Pandeya et al — cancer_rr","title":"Relative risks for cancer from Pandeya et al — cancer_rr","text":"Relative risks cancer given different levels alcohol consumption","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/cancer_rr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative risks for cancer from Pandeya et al — cancer_rr","text":"","code":"cancer_rr"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/cancer_rr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relative risks for cancer from Pandeya et al — cancer_rr","text":"data frame 24 rows 5 columns: cancer_type type cancer associated relative risk dose Dose grams/day relative risk estimated RR Relative risk cancer given dose alcohol lower_CI, upper_CI Lower upper bounds 95% confidence interval","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/cancer_rr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative risks for cancer from Pandeya et al — cancer_rr","text":"Pandeya, Nirmala, et al. \"Cancers Australia 2010 attributable consumption alcohol.\" Australian New Zealand journal public health 39.5 (2015): 408-413.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/change_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the link for the fraction's variance calculation — change_link","title":"Change the link for the fraction's variance calculation — change_link","text":"Change link function potential impact fraction population attributable fraction different link.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/change_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the link for the fraction's variance calculation — change_link","text":"","code":"change_link(x, link = \"identity\", link_inv = NULL, link_deriv = NULL)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/change_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the link for the fraction's variance calculation — change_link","text":"x pif_class object link Link function pif confidence intervals stays within expected bounds. link_inv inverse link. example link logit inv_logit. link_deriv Derivative link function. function tries build automatically link using Deriv::Deriv().","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/change_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the link for the fraction's variance calculation — change_link","text":"pif_class object different link.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/change_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the link for the fraction's variance calculation — change_link","text":"","code":"#A potential impact fraction pif1 <- pif(p = 0.2, p_cft = 0.1, beta = 1.2, var_p = 0.01,   var_beta = 0.2) pif1 #>  #> ── Potential Impact Fraction ── #>  #> PIF = 1.923% [95% CI: -7.401% to 10.438%] #> standard_deviation(pif %) = 4.545 #> standard_deviation(link(pif)) = 0.046  #Now change the pif to logit to control the negatives pif1_logit <- change_link(pif1, link = \"logit\") pif1_logit #>  #> ── Potential Impact Fraction ── #>  #> PIF = 1.923% [95% CI: 0.017% to 68.800%] #> standard_deviation(pif %) = 4.545 #> standard_deviation(link(pif)) = 2.410"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that checks the link — check_links","title":"Function that checks the link — check_links","text":"Function checks link","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that checks the link — check_links","text":"","code":"check_links(link, link_deriv, link_inv)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that checks the link — check_links","text":"link Link function pif confidence intervals stays within expected bounds. link_deriv Derivative link function. function tries build automatically link using Deriv::Deriv(). link_inv inverse link. example link logit inv_logit.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that checks the link — check_links","text":"Invisible. Called side effects","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_rr_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that checks the relative risk link — check_rr_links","title":"Function that checks the relative risk link — check_rr_links","text":"Function checks relative risk link","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_rr_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that checks the relative risk link — check_rr_links","text":"","code":"check_rr_links(rr_link, rr_link_deriv)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_rr_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that checks the relative risk link — check_rr_links","text":"rr_link Link function relative risk given rr_link(beta). rr_link_deriv Derivative link function relative risk. function tries build automatically rr_link using Deriv::Deriv().","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/check_rr_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that checks the relative risk link — check_rr_links","text":"Invisible. Called side effects","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact Fraction related classes — classes","title":"Potential Impact Fraction related classes — classes","text":"Objects handling potential impact fractions categorical exposure considering observed prevalence  p relative risk (relative risk parameter) beta.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact Fraction related classes — classes","text":"","code":"pif_class(   pif = integer(0),   variance = integer(0),   conf_level = integer(0),   type = \"PIF\",   link = function() NULL,   link_inv = function() NULL,   link_deriv = function() NULL )  pif_atomic_class(   p,   p_cft,   beta,   var_p,   var_beta,   rr_link,   rr_link_deriv,   link,   link_deriv,   link_inv,   conf_level,   type,   upper_bound_p,   upper_bound_beta )  pif_total_class(   pif_list,   weights,   sigma_weights,   conf_level = 0.95,   link,   link_inv,   link_deriv )  pif_ensemble_class(pif_list, conf_level = 0.95)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact Fraction related classes — classes","text":"pif Potential Impact Fraction estimate variance variance estimate potential impact fraction (.e. pif) conf_level Confidence level confidence interval (default 0.95). type Character either Potential Impact Fraction (PIF) Population Attributable Fraction (PAF) link Link function pif confidence intervals stays within expected bounds. link_inv inverse link. example link logit inv_logit. link_deriv derivative link. example link logit deriv_logit (.e. function(pif) 1 / (pif * (1 - pif))). p Prevalence (proportion) exposed individuals N exposure levels. p_cft Counterfactual prevalence (proportion) exposed individuals N exposure levels. beta Relative risk parameter standard deviation available (usually either relative risk directly log relative risk RRs, ORs HRs come exponential models). var_p Estimate colink_variance matrix p entry var_p[,j] represents colink_variance p[] p[j]. var_beta Estimate colink_variance matrix beta entry var_beta[,j] represents colink_variance beta[] beta[j]. rr_link Link function relative risk given rr_link(beta). rr_link_deriv Derivative link function relative risk. constructor tries build automatically rr_link using Deriv::Deriv(). upper_bound_p Whether values p component link_variance approximated upper bound. upper_bound_beta Whether values beta component link_variance approximated upper bound. pif_list list potential impact fractions pif_class total can computed . weights Weights calculating total PIF (respectively PAF) pif_total. sigma_weights Colink_variance matrix weights calculating total PIF (respectively PAF) pif_total.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":"properties-of-a-pif-class","dir":"Reference","previous_headings":"","what":"Properties of a  pif_class","title":"Potential Impact Fraction related classes — classes","text":"ci numeric(2) — Lower upper confidence limits level conf_level. link_vals numeric — Entrywise evaluation link function pif: link(pif). link_deriv_vals character — Entrywise evaluation derivative link function (link_deriv) pif: link(pif). link_variance numeric - Estimate linked potential impact fraction's variance: variance(link(pif)).","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":"properties-of-a-pif-atomic-class","dir":"Reference","previous_headings":"","what":"Properties of a  pif_atomic_class","title":"Potential Impact Fraction related classes — classes","text":"pif_atomic_class inherits properties pif_class well : mu_obs numeric — Average relative risk observed population. mu_cft numeric — Average relative risk counterfactual population. pif numeric — Estimate potential impact fraction. rr_link_deriv_vals character — Entrywise evaluation derivative link function (link_deriv) pif: link(pif).","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":"computation-of-confidence-intervals","dir":"Reference","previous_headings":"","what":"Computation of confidence intervals","title":"Potential Impact Fraction related classes — classes","text":"Wald-type confidence intervals calculated link(pif) follows: $$  \\text{CI}_{\\text{Link}} = \\text{link}\\big(\\text{PIF}\\big) \\pm Z_{\\alpha/2}\\cdot\\sqrt{\\textrm{link\\_variance}} $$ transformed back using inverse link function inv_link: $$  \\text{CI}_{\\text{PIF}} = \\text{link}^{-1}\\Big(\\text{CI}_{\\text{Link}}\\Big) $$","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":"class-structure","dir":"Reference","previous_headings":"","what":"Class structure","title":"Potential Impact Fraction related classes — classes","text":"potential impact fractions inherit pif_class provides generics. pif_atomic_class type pif_class contains enough information computed classic formula Walter: $$  \\textrm{PIF} = \\dfrac{    \\sum\\limits_{=1}^N p_i \\text{RR}_i - \\sum\\limits_{=1}^N p_i^{\\text{cft}} \\text{RR}_i   }{    \\sum\\limits_{=1}^N p_i \\text{RR}_i   } $$ relative risk function parameter \\(\\beta_i\\) $$  \\text{RR}_i = g(\\beta_i) $$ link_variance calculated function PIF: \\(f(\\textrm{PIF})\\) pif_atomic_class contains one potential impact fraction parameters estimate . pif_additive_class type pif_class can computed sum weighted transformations potential impact fractions weights can random. Elements pif_additive_class link_variance estimated following expression: $$  f\\big(\\textrm{PIF}_{+}\\big) = \\sum\\limits_{= 1}^{N} q_i \\cdot  f_i\\Big(\\textrm{PIF}_i\\Big) $$ Examples calculations can added pif_additive_class :Ç total potential impact fraction (combining different subpopulations) $$  \\textrm{PIF}_{Total} = \\sum\\limits_{= 1}^{N} q_i \\cdot \\textrm{PIF}_i $$ \\(q_i\\) representing proportions individuals category. ensemble potential impact fraction (representing different relative risks) outcome $$ \\textrm{PIF}_{Ensemble} = 1 - \\prod\\limits_{= 1}^{N} \\Big(1 - \\textrm{PIF}_i\\Big) $$ can transformed $$ \\ln\\Big(1 - \\textrm{PIF}_{Ensemble}\\Big) =  \\sum\\limits_{= 1}^{N} \\ln\\big(1 - \\textrm{PIF}_i\\big) $$","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Potential Impact Fraction related classes — classes","text":"","code":"#Create a new pif parent class element pif_class(pif = 0.3, variance = 0.01, conf_level = 0.95, type = \"PIF\",   link = logit, link_inv = inv_logit, link_deriv = deriv_logit) #>  #> ── Potential Impact Fraction ── #>  #> PIF = 30.000% [95% CI: 14.423% to 52.149%] #> standard_deviation(pif %) = 10.000 #> standard_deviation(link(pif)) = 0.476  #Create a new potential impact fraction from the Walter's formula pif_atomic_class(   p = 0.499, p_cft = 0, beta = 3.6, var_p = 0.1, var_beta = 3,   link = logit, link_inv = inv_logit, link_deriv = deriv_logit,   rr_link = identity, rr_link_deriv = function(x) 1,   conf_level = 0.95, type = \"PAF\",   upper_bound_p = FALSE,   upper_bound_beta = FALSE ) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 56.473% [95% CI: 17.628% to 88.720%] #> standard_deviation(paf %) = 22.601 #> standard_deviation(link(paf)) = 0.919  #Create a list of pif pif1 <- pif_atomic_class(   p = 0.499, p_cft = 0, beta = 3.6, var_p = 0.01, var_beta = 0.03,   link = logit, link_inv = inv_logit, link_deriv = deriv_logit,   rr_link = identity, rr_link_deriv = function(x) 1,   conf_level = 0.95, type = \"PAF\",   upper_bound_p = FALSE,   upper_bound_beta = FALSE ) pif2 <- pif_atomic_class(   p = 0.79, p_cft = 0, beta = 3.6, var_p = 0.01, var_beta = 0.03,   link = logit, link_inv = inv_logit, link_deriv = deriv_logit,   rr_link = identity, rr_link_deriv = function(x) 1,   conf_level = 0.95, type = \"PAF\",   upper_bound_p = FALSE,   upper_bound_beta = FALSE ) pif3 <- pif_atomic_class(   p = 0.8, p_cft = 0, beta = 3.6, var_p = 0.01, var_beta = 0.03,   link = logit, link_inv = inv_logit, link_deriv = deriv_logit,   rr_link = identity, rr_link_deriv = function(x) 1,   conf_level = 0.95, type = \"PAF\",   upper_bound_p = FALSE,   upper_bound_beta = FALSE )  tp1 <- pif_total_class(pif_list = list(pif1, pif2),   weights = c(0.5, 0.2), sigma_weights = diag(0.001, ncol = 2, nrow = 2),   link = identity, link_inv = identity, link_deriv = identity)  pif_total_class(pif_list = list(tp1, pif3),   weights = c(0.7, 0.3), sigma_weights = diag(0.001, ncol = 2, nrow = 2),   link = identity, link_inv = identity, link_deriv = identity) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 49.441% [95% CI: 45.514% to 53.368%] #> standard_deviation(paf %) = 4.052 #> standard_deviation(link(paf)) = 0.020"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coefficients of a pif object — coef","title":"Extract coefficients of a pif object — coef","text":"Gets potential impact fraction value","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coefficients of a pif object — coef","text":"object pif_class object. ... Additional parameters pass coef (ignored)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coefficients of a pif object — coef","text":"","code":"my_pif <- pif(p = 0.5, p_cft = 0.25, beta = 1.3, var_p = 0.1, var_beta = 0.2) coef(my_pif) #> [1] 0.06521739"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/confint.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract confidence intervals of a pif object — confint","title":"Extract confidence intervals of a pif object — confint","text":"Gets confidence interval potential impact fraction","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/confint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract confidence intervals of a pif object — confint","text":"object pif_class object. level Level confidence desired. ... Additional parameters pass confint (ignored)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/confint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract confidence intervals of a pif object — confint","text":"","code":"my_pif <- pif(p = 0.5, p_cft = 0.25, beta = 1.3, var_p = 0.1, var_beta = 0.2) #Default 95% CI confint(my_pif) #> [1] -0.1882459  0.2646147  #Custom 90% ci: confint(my_pif, level = 0.90) #> [1] -0.1432847  0.2356948"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/cov_atomic_pif.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the colink_variance between two pif_atomic objects — cov_atomic_pif","title":"Estimate the colink_variance between two pif_atomic objects — cov_atomic_pif","text":"Estimate colink_variance two pif_atomic objects","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/cov_atomic_pif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the colink_variance between two pif_atomic objects — cov_atomic_pif","text":"","code":"cov_atomic_pif(   pif1,   pif2,   var_p = NULL,   var_beta = NULL,   independent_p = \"guess\",   independent_beta = \"guess\",   quiet = FALSE )"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/cov_atomic_pif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the colink_variance between two pif_atomic objects — cov_atomic_pif","text":"pif1 pif_atomic_class object pif2 pif_atomic_class object var_p Colink_variance matrix prevalences pif1 ones included .... var_beta Colink_variance matrix parameter beta pif1 ones included .... independent_p pifs share prevalence data. Either TRUE, FALSE, guess (default) matrix. matrix given independent_p[,j] = 1 -th j-th pifs share prevalence data independent_p[,j] = 0 -th j-th pifs share prevalence data. independent_beta pifs share beta parameter. Either TRUE, FALSE guess (default) matrix. matrix given independent_beta[,j] = 1 -th j-th pifs share relative risk parameters independent_beta[,j] = 0 -th j-th pifs share relative risk parameters. quiet Whether throw warnings messages","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covariance_from_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariance component with respect to p — covariance_from_parameters","title":"Covariance component with respect to p — covariance_from_parameters","text":"Calculates covariance p beta component two potential impact fractions complete covariance.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covariance_from_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariance component with respect to p — covariance_from_parameters","text":"","code":"from_parameters_covariance_p_component(   p1,   p2,   p1_cft,   p2_cft,   rr1,   rr2,   mu_obs1,   mu_obs2,   mu_cft1,   mu_cft2,   var_p,   upper_bound )  from_parameters_covariance_beta_component(   p1,   p2,   p1_cft,   p2_cft,   rr1,   rr2,   rr_link_deriv_vals1,   rr_link_deriv_vals2,   mu_obs1,   mu_obs2,   mu_cft1,   mu_cft2,   var_beta,   upper_bound )  from_parameters_pif_covariance(   p1,   p2,   p1_cft,   p2_cft,   rr1,   rr2,   rr_link_deriv_vals1,   rr_link_deriv_vals2,   mu_obs1,   mu_obs2,   mu_cft1,   mu_cft2,   var_p,   var_beta,   upper_bound_p = FALSE,   upper_bound_beta = FALSE )  from_parameters_pif_variance(   p,   p_cft,   rr,   rr_link_deriv_vals,   mu_obs,   mu_cft,   var_p,   var_beta,   upper_bound_p = FALSE,   upper_bound_beta = FALSE )"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covariance_from_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariance component with respect to p — covariance_from_parameters","text":"p1 Observed proportion exposed first potential impact fraction p2 Observed proportion exposed first potential impact fraction p1_cft Counterfactual proportion exposed first potential impact fraction p2_cft Counterfactual proportion exposed first potential impact fraction rr1 Relative risk first potential impact fraction rr2 Relative risk second potential impact fraction mu_obs1 Average relative risk population first potential impact fraction. mu_obs2 Average relative risk population second potential impact fraction. mu_cft1 Average relative risk counterfactual population first potential impact fraction. mu_cft2 Average relative risk counterfactual second potential impact fraction. var_p Covariance matrix entry var_p[,j] corresponding covariance p1[] p2[j]. upper_bound Whether variance calculated upper bound variance (assuming perfect correlation). rr_link_deriv_vals1 Values derivative relative risk function evaluated theta (relative risk parameter). rr_link_deriv_vals2 Values derivative relative risk function evaluated theta (relative risk parameter). var_beta Estimate colink_variance matrix beta entry var_beta[,j] represents colink_variance beta[] beta[j]. upper_bound_p Whether values p component link_variance approximated upper bound. upper_bound_beta Whether values beta component link_variance approximated upper bound. p Prevalence (proportion) exposed individuals N exposure levels. p_cft Counterfactual prevalence (proportion) exposed individuals N exposure levels. rr relative risk exposure levels. rr_link_deriv_vals derivative relative risk function g respect parameter beta evaluated beta. mu_obs average value relative risk observed population. mu_cft average value counterfactual relative risk population.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covariance_from_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariance component with respect to p — covariance_from_parameters","text":"covariance component either p beta","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covariance_from_parameters.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Covariance component with respect to p — covariance_from_parameters","text":"estimation require pif_class object instead built parameters.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covariance_from_parameters.html","id":"formulas","dir":"Reference","previous_headings":"","what":"Formulas","title":"Covariance component with respect to p — covariance_from_parameters","text":"following represents covariance components. p: $$ \\text{CC}_{p} = \\dfrac{  \\partial \\textrm{PIF}_i}{\\partial p_i}^{\\top}  \\textrm{covariance}\\big( \\hat{p}_i, \\hat{p}_j\\big)  \\dfrac{\\partial \\textrm{PIF}_j}{\\partial p_j} $$ beta: $$ \\text{CC}_{\\theta} =  \\dfrac{ \\partial \\textrm{PIF}_i}{\\partial \\theta_i}^{\\top} \\textrm{covariance}\\big( \\hat{\\theta}_i, \\hat{\\theta}_j\\big) \\dfrac{\\partial \\textrm{PIF}_j}{\\partial \\theta_j} $$","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covcor.html","id":null,"dir":"Reference","previous_headings":"","what":"Colink_variance function for a pif_total_class — cov_total_pif","title":"Colink_variance function for a pif_total_class — cov_total_pif","text":"Recursively obtains colink_variance matrix pif_total_class Computes colink_variance (covariance) correlation (correlation) multiple potential impact fractions link_variance variance standard deviation standard_deviationfor potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covcor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colink_variance function for a pif_total_class — cov_total_pif","text":"","code":"cov_total_pif(   pif1,   pif2,   var_p = NULL,   var_beta = NULL,   independent_p = \"guess\",   independent_beta = \"guess\",   quiet = FALSE )  covariance(   x,   ...,   var_p = NULL,   var_beta = NULL,   independent_p = \"guess\",   independent_beta = \"guess\",   quiet = FALSE )  variance(x, ...)  standard_deviation(x, ...)  correlation(   x,   ...,   var_p = NULL,   var_beta = NULL,   independent_p = \"guess\",   independent_beta = \"guess\",   quiet = FALSE )"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covcor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colink_variance function for a pif_total_class — cov_total_pif","text":"pif1 Either pif_atomic_class pif_total_class pif2 Either pif_atomic_class pif_total_class var_p Colink_variance matrix prevalences pif1 ones included .... var_beta Colink_variance matrix parameter beta pif1 ones included .... independent_p pifs share prevalence data. Either TRUE, FALSE, guess (default) matrix. matrix given independent_p[,j] = 1 -th j-th pifs share prevalence data independent_p[,j] = 0 -th j-th pifs share prevalence data. independent_beta pifs share beta parameter. Either TRUE, FALSE guess (default) matrix. matrix given independent_beta[,j] = 1 -th j-th pifs share relative risk parameters independent_beta[,j] = 0 -th j-th pifs share relative risk parameters. quiet Whether throw warnings messages x potential impact fraction ... Multiple additional potential impact fraction objects separated commas.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/covcor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colink_variance function for a pif_total_class — cov_total_pif","text":"","code":"# Get the approximate link_variance of a pif object my_pif <- pif(p = 0.5, p_cft = 0.25, beta = 1.3, var_p = 0.1, var_beta = 0.2) variance(my_pif) #> [1] 0.01309351  # This is the same as colink_variance with just 1 pIF covariance(my_pif) #>            [,1] #> [1,] 0.01309351  # Calculate the colink_variance between 3 fractions with shared relative risk beta <- 0.3 var_beta <- 0.1 pif1 <- pif(0.5, 0.2, beta, var_p = 0.5 * (1 - 0.5) / 100, var_beta = var_beta) pif2 <- pif(0.3, 0.1, beta, var_p = 0.3 * (1 - 0.3) / 100, var_beta = var_beta) pif3 <- pif(0.7, 0.3, beta, var_p = 0.7 * (1 - 0.7) / 100, var_beta = var_beta) covariance(pif1, pif2, pif3, independent_beta = FALSE) #>            [,1]       [,2]       [,3] #> [1,] 0.05549391 0.02647033 0.11677134 #> [2,] 0.02647033 0.01255449 0.05394007 #> [3,] 0.11677134 0.05394007 0.24599711  # The colink_variance between a pif and itself only has the link_variance as entries covariance(pif1, pif1, independent_beta = FALSE, independent_p = FALSE) #>            [,1]       [,2] #> [1,] 0.05549391 0.05549391 #> [2,] 0.05549391 0.05549391  # Or if there is a colink_variance structure between different betas you can specify with # var_beta in the colink_variance betas <- c(1.3, 1.2, 1.27)  # Colink_variance among all betas var_beta <- matrix(c(   1.0000000, -0.12123053, 0.35429369,   -0.1212305, 1.00000000, -0.04266409,   0.3542937, -0.04266409, 1.00000000 ), byrow = TRUE, ncol = 3) pif1 <- pif(0.5, 0.2, betas[1], var_p = 0.5 * (1 - 0.5) / 100, var_beta = var_beta[1, 1]) pif2 <- pif(0.3, 0.1, betas[2], var_p = 0.3 * (1 - 0.3) / 100, var_beta = var_beta[2, 2]) pif3 <- pif(0.3, 0.1, betas[3], var_p = 0.3 * (1 - 0.3) / 100, var_beta = var_beta[3, 3]) covariance(pif1, pif2, pif3, var_beta = var_beta) #>              [,1]         [,2]         [,3] #> [1,]  0.051602337 -0.004785894  0.013897866 #> [2,] -0.004785894  0.031752970 -0.001209275 #> [3,]  0.013897866 -0.001209275  0.029410798  # Compute the correlation correlation(pif1, pif2, pif3, var_beta = var_beta, quiet = TRUE) #>            [,1]        [,2]        [,3] #> [1,]  1.0000000 -0.11823232  0.35674676 #> [2,] -0.1182323  1.00000000 -0.03957123 #> [3,]  0.3567468 -0.03957123  1.00000000"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiacov.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative risk covariance from Lee et al — dementiacov","title":"Relative risk covariance from Lee et al — dementiacov","text":"Covariances relative risks Lee et al","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiacov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative risk covariance from Lee et al — dementiacov","text":"","code":"dementiacov"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiacov.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relative risk covariance from Lee et al — dementiacov","text":"covariance matrix 12 rows 12 columns. entry represents covariance .","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiacov.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative risk covariance from Lee et al — dementiacov","text":"Lee, Mark, et al. \"Variation population attributable fraction dementia associated potentially modifiable risk factors race ethnicity US.\" JAMA network open 5.7 (2022): e2219672-e2219672.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiarisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposure and Relative Risk data from Lee et Al — dementiarisk","title":"Exposure and Relative Risk data from Lee et Al — dementiarisk","text":"Relative risk exposure data dementia risk-factors","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiarisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposure and Relative Risk data from Lee et Al — dementiarisk","text":"","code":"dementiarisk"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiarisk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Exposure and Relative Risk data from Lee et Al — dementiarisk","text":"data frame 12 rows 11 columns: risk_factor risk factor dementia RR relative risk dementia associated risk factor lower_CI, upper_CI Lower upper bounds 95% confidence interval logrr logarithm relative risk log(RR) sdlog variance logarithm relative risk variance(log(RR)) total proportion individuals exposed overall population hispanic proportion hispanic individuals exposed asian proportion non-hispanic asian individuals exposed black proportion non-hispanic black individuals exposed white proportion non-hispanic white individuals exposed","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/dementiarisk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exposure and Relative Risk data from Lee et Al — dementiarisk","text":"Lee, Mark, et al. \"Variation population attributable fraction dementia associated potentially modifiable risk factors race ethnicity US.\" JAMA network open 5.7 (2022): e2219672-e2219672.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/deriv_linkfuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivatives of link functions — deriv_linkfuns","title":"Derivatives of link functions — deriv_linkfuns","text":"collection derivatives link functions potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/deriv_linkfuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivatives of link functions — deriv_linkfuns","text":"","code":"deriv_logit(pif)  deriv_log_complement(pif)  deriv_hawkins(pif)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/deriv_linkfuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivatives of link functions — deriv_linkfuns","text":"pif value potential impact fraction population attributable fraction","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/deriv_linkfuns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derivatives of link functions — deriv_linkfuns","text":"functions programmed follows $$  \\text{deriv\\_logit}(\\text{PIF}) = \\dfrac{    1   }{    \\text{PIF} \\cdot (1 - \\text{PIF})   }, $$ $$  \\text{deriv\\_log-complement}(\\text{PIF}) = \\dfrac{    1   }{    \\text{PIF} - 1   }, $$ $$  \\text{deriv\\_Hawkins}(\\text{PIF}) = \\dfrac{    1   }{    \\sqrt{\\text{PIF}^2 + 1}   }, $$","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/derivatives.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial derivatives of PIF — derivatives","title":"Partial derivatives of PIF — derivatives","text":"Calculates partial derivatives potential impact fraction respect parameters p beta.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/derivatives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial derivatives of PIF — derivatives","text":"","code":"deriv_pif_p(p, p_cft, rr, mu_obs = NULL, mu_cft = NULL)  deriv_pif_beta(p, p_cft, rr, rr_link_deriv_vals, mu_obs = NULL, mu_cft = NULL)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/derivatives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial derivatives of PIF — derivatives","text":"p Prevalence (proportion) exposed individuals N exposure levels. p_cft Counterfactual prevalence (proportion) exposed individuals N exposure levels. rr relative risk exposure levels. mu_obs average value relative risk observed population. mu_cft average value counterfactual relative risk population. rr_link_deriv_vals derivative relative risk function g respect parameter beta evaluated beta.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/derivatives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial derivatives of PIF — derivatives","text":"partial derivative (usually vector)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/derivatives.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Partial derivatives of PIF — derivatives","text":"p beta usually vectors vector-valued derivatives.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/derivatives.html","id":"formulas","dir":"Reference","previous_headings":"","what":"Formulas","title":"Partial derivatives of PIF — derivatives","text":"partial derivative PIF respect p : $$ \\dfrac{\\partial \\textrm{PIF}}{\\partial p} = \\dfrac{\\mu^{\\text{cft}}}{\\big(\\mu^{\\text{obs}}\\big)^2} \\cdot \\big( \\text{RR}(\\beta) - 1) $$ partial derivative PIF respect beta : $$ \\dfrac{\\partial \\textrm{PIF}}{\\partial \\beta} = \\Bigg(\\dfrac{  \\mu^{\\text{obs}} \\cdot p_{*} - \\mu^{\\text{cft}} \\cdot p }{  \\Big( \\mu^{\\text{obs}}\\Big)^2 }\\Bigg)\\odot \\text{RR}'(\\beta)$$ \\(\\odot\\) representing Hadamard (elementwise) product.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/fraction_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the type of the fraction — fraction_type","title":"Get the type of the fraction — fraction_type","text":"Obtain whether fraction potential impact fraction (PIF) population attributable fraction (PAF)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/fraction_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the type of the fraction — fraction_type","text":"","code":"fraction_type(x)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/fraction_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the type of the fraction — fraction_type","text":"x pif_class object","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/fraction_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the type of the fraction — fraction_type","text":"character either PIF PAF depending object","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/fraction_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the type of the fraction — fraction_type","text":"","code":"#A potential impact fraction pif1 <- pif(p = 0.2, p_cft = 0.1, beta = 1.2, quiet = TRUE) fraction_type(pif1) #> [1] \"PIF\"  #A population attributable fraction paf1 <- paf(p = 0.2, beta = 1.2, quiet = TRUE) fraction_type(paf1) #> [1] \"PAF\""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Getters — getters","title":"Getters — getters","text":"Collection functions potential impact fraction class work getters properties. function constructed get_property","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getters — getters","text":"","code":"get_rr(self)  get_mu_obs(self)  get_mu_cft(self)  get_pif(self)  get_link_vals(self)  get_link_deriv_vals(self)  get_rr_link_deriv_vals(self)  get_link_variance(self)  get_variance_atomic(self)  get_ci(self)  get_total_coefs(self)  get_ensemble_coefs(self)  get_ensemble_pif(self)  get_total_pif(self)  get_total_type(self)  get_ensemble_type(self)  get_covariance_total(self)  get_ensemble_covariance(self)  get_variance_total(self)  get_ensemble_variance(self)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getters — getters","text":"self pif_class pif_atomic_class object created S7.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/inv_linkfuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverses of link functions — inv_linkfuns","title":"Inverses of link functions — inv_linkfuns","text":"collection inverses link functions potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/inv_linkfuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverses of link functions — inv_linkfuns","text":"","code":"inv_logit(x)  inv_log_complement(x)  inv_hawkins(x)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/inv_linkfuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverses of link functions — inv_linkfuns","text":"x value inv_link(x) potential impact fraction population attributable fraction.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/inv_linkfuns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverses of link functions — inv_linkfuns","text":"functions programmed follows $$  \\text{inv\\_logit}(\\text{PIF}) = \\dfrac{    1   }{    1 + \\exp(-x)   }, $$ $$  \\text{inv\\_log-complement}(\\text{PIF}) = 1 - \\exp(x), $$ $$  \\text{inv\\_Hawkins}(\\text{PIF}) =   \\frac{1}{2} \\exp(-x) \\cdot \\big(\\exp(x) - 1\\big) \\cdot \\big(\\exp(x) + 1\\big) $$","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_deriv_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the values of the derivative of link — link_deriv_vals","title":"Get the values of the derivative of link — link_deriv_vals","text":"Obtain values derivative link function potential impact fraction (PIF) population attributable fraction (PAF) pif","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_deriv_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the values of the derivative of link — link_deriv_vals","text":"","code":"link_deriv_vals(x)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_deriv_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the values of the derivative of link — link_deriv_vals","text":"x pif_class object","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_deriv_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the values of the derivative of link — link_deriv_vals","text":"number indicating derivative link(pif)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_deriv_vals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the values of the derivative of link — link_deriv_vals","text":"","code":"#A potential impact fraction pif1 <- pif(p = 0.2, p_cft = 0.1, beta = 1.2, quiet = TRUE) link_deriv_vals(pif1) #> [1] -1.019608"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_parsers.html","id":null,"dir":"Reference","previous_headings":"","what":"Link parsers — link_parsers","title":"Link parsers — link_parsers","text":"Functions parse link (inverse link) word function","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_parsers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link parsers — link_parsers","text":"","code":"parse_link(link_name)  parse_inv_link(link_name)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_parsers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link parsers — link_parsers","text":"link_name name link function.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_parsers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Link parsers — link_parsers","text":"function corresponding link_name.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_parsers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Link parsers — link_parsers","text":"following valid link names: identity function f(x) = x.inverse finv(x) = x logit function f(x) = ln(x / (1 - x)) inverse finv(x) = 1 / (1 + exp(-x)) log-complement function f(x) = ln(1 - x) inverse finv(x) = 1 - exp(x) hawkins function f(x) = ln(x + sqrt(x^2 + 1)) inverse finv(x) = 0.5 * exp(-x) * (exp(2 * x) - 1) exponential function f(x) = exp(x) inverse f(x) = ln(x)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/link_parsers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Link parsers — link_parsers","text":"function supplied link_name function returned","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/linkfuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Link functions — linkfuns","title":"Link functions — linkfuns","text":"collection common link functions, calculating link_variance  potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/linkfuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link functions — linkfuns","text":"","code":"logit(pif)  log_complement(pif)  hawkins(pif)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/linkfuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link functions — linkfuns","text":"pif value potential impact fraction population attributable fraction","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/linkfuns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Link functions — linkfuns","text":"functions programmed follows $$  \\text{logit}(\\text{PIF}) = \\ln\\Bigg(\\dfrac{    \\text{PIF}   }{    1 - \\text{PIF}   }\\Bigg), $$ $$  \\text{log-complement}(\\text{PIF}) = \\ln\\big(1 - \\text{PIF}\\big), $$ $$  \\text{Hawkins}(\\text{PIF}) = \\ln\\Big(\\text{PIF} + \\sqrt{\\text{PIF}^2 + 1}\\Big). $$","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/linkfuns.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Link functions — linkfuns","text":"used, link_variance calculated linkfun(pif).","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_cft_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean under the counterfactual prevalence — mu_cft_fun","title":"Compute the mean under the counterfactual prevalence — mu_cft_fun","text":"Compute mean counterfactual prevalence","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_cft_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean under the counterfactual prevalence — mu_cft_fun","text":"","code":"mu_cft_fun(p_cft, rr)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_cft_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean under the counterfactual prevalence — mu_cft_fun","text":"p_cft Counterfactual prevalence (proportion) exposed individuals N exposure levels. rr relative risk exposure levels.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_cft_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean under the counterfactual prevalence — mu_cft_fun","text":"mean relative risk counterfactual prevalence","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_obs_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean under the observed prevalence — mu_obs_fun","title":"Compute the mean under the observed prevalence — mu_obs_fun","text":"Compute mean observed prevalence","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_obs_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean under the observed prevalence — mu_obs_fun","text":"","code":"mu_obs_fun(p, rr)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_obs_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean under the observed prevalence — mu_obs_fun","text":"p Prevalence (proportion) exposed individuals N exposure levels. rr relative risk exposure levels.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/mu_obs_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean under the observed prevalence — mu_obs_fun","text":"mean relative risk observed prevalence","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_atomic_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence interval for a potential impact fraction — pif_atomic_ci","title":"Confidence interval for a potential impact fraction — pif_atomic_ci","text":"Confidence interval potential impact fraction","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_atomic_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence interval for a potential impact fraction — pif_atomic_ci","text":"","code":"pif_atomic_ci(link_vals, link_variance, conf_level, link_inv)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_atomic_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence interval for a potential impact fraction — pif_atomic_ci","text":"link_vals Values link function evaluated pif (.e. link(pif)) link_variance Link_variance estimate linked potential impact fraction (.e. link(pif)) conf_level Confidence level interval link_inv Inverse link function used compute link_vals link_variance.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_atomic_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence interval for a potential impact fraction — pif_atomic_ci","text":"vector lower upper bounds","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_class_apply_1st.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to a property of a pif_class or to the first pif_class available in a pif_total_class — pif_class_apply_1st","title":"Apply a function to a property of a pif_class or to the first pif_class available in a pif_total_class — pif_class_apply_1st","text":"Apply function property pif_class first pif_class available pif_total_class","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_class_apply_1st.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to a property of a pif_class or to the first pif_class available in a pif_total_class — pif_class_apply_1st","text":"","code":"pif_class_apply_1st(x, fun, property)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_class_apply_1st.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to a property of a pif_class or to the first pif_class available in a pif_total_class — pif_class_apply_1st","text":"x Either pif_class pif_total_class fun function apply first element pif_total_class property property interest pif_class extract","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_class_atomic_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the colink_variances between two pif classes (atomic pifs) — pif_class_atomic_variance","title":"Get the colink_variances between two pif classes (atomic pifs) — pif_class_atomic_variance","text":"Get colink_variances two pif classes (atomic pifs)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_class_atomic_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the colink_variances between two pif classes (atomic pifs) — pif_class_atomic_variance","text":"","code":"pif_class_atomic_variance(   pif1,   pif2,   var_p = NULL,   var_beta = NULL,   independent_p = \"guess\",   independent_beta = \"guess\",   quiet = FALSE )"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_class_atomic_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the colink_variances between two pif classes (atomic pifs) — pif_class_atomic_variance","text":"pif1 pif_class object pif2 pif_class object var_p Colink_variance matrix prevalences pif1 pif2. var_beta Colink_variance matrix parameter beta pif1 pif2. independent_p pif1 pif2 share prevalence data. Either TRUE, FALSE guess (default). independent_beta pif1 pif2 share beta parameter. Either TRUE, FALSE guess (default). quiet Whether throw warnings messages","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_class_atomic_variance.html","id":"colink-variance-matrices","dir":"Reference","previous_headings":"","what":"Colink_variance matrices","title":"Get the colink_variances between two pif classes (atomic pifs) — pif_class_atomic_variance","text":"default var_p specified assumes colink_variances parameters p pif1 pif2 uncorrelated. However, pif1 pif2 share prevalence estimates (.e. share ps, user set independent_p = TRUE account correlation). thing happens var_beta. var_beta specified assumption beta parameters pif1 pif2 uncorrelated unless independent_beta set TRUE. user provides colink_variance matrix var_p independent_p disregarded. Similarly, user provides var_beta independent_beta ignored.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the potential impact fraction — pif_fun","title":"Compute the potential impact fraction — pif_fun","text":"Compute potential impact fraction","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the potential impact fraction — pif_fun","text":"","code":"pif_fun(p, p_cft, rr)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the potential impact fraction — pif_fun","text":"p Prevalence (proportion) exposed individuals N exposure levels. p_cft Counterfactual prevalence (proportion) exposed individuals N exposure levels. rr relative risk exposure levels.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the potential impact fraction — pif_fun","text":"potential impact fraction (numeric)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the potential impact fraction — pif_fun2","title":"Compute the potential impact fraction — pif_fun2","text":"Compute potential impact fraction","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the potential impact fraction — pif_fun2","text":"","code":"pif_fun2(mu_obs, mu_cft)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the potential impact fraction — pif_fun2","text":"mu_obs average value relative risk observed population. mu_cft average value counterfactual relative risk population.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pif_fun2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the potential impact fraction — pif_fun2","text":"potential impact fraction (numeric)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact fraction and Population Attributable Fraction — pifpaf","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"Calculates potential impact fraction pif population attributable fraction paf categorical exposure considering observed prevalence  p relative risk (relative risk parameter) beta.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"","code":"paf(   p,   beta,   var_p = NULL,   var_beta = NULL,   rr_link = \"identity\",   rr_link_deriv = NULL,   link = \"log-complement\",   link_inv = NULL,   link_deriv = NULL,   conf_level = 0.95,   quiet = FALSE )  pif(   p,   p_cft = rep(0, length(p)),   beta,   var_p = NULL,   var_beta = NULL,   rr_link = \"identity\",   rr_link_deriv = NULL,   link = \"log-complement\",   link_inv = NULL,   link_deriv = NULL,   conf_level = 0.95,   type = \"PIF\",   quiet = FALSE )"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"p Prevalence (proportion) exposed individuals N exposure levels. beta Relative risk parameter standard deviation available (usually either relative risk directly log relative risk RRs, ORs HRs come exponential models). var_p Estimate colink_variance matrix p entry var_p[,j] represents colink_variance p[] p[j]. var_beta Estimate colink_variance matrix beta entry var_beta[,j] represents colink_variance beta[] beta[j]. rr_link Link function relative risk given rr_link(beta). rr_link_deriv Derivative link function relative risk. function tries build automatically rr_link using Deriv::Deriv(). link Link function pif confidence intervals stays within expected bounds. link_inv inverse link. example link logit inv_logit. link_deriv Derivative link function. function tries build automatically link using Deriv::Deriv(). conf_level Confidence level confidence interval (default 0.95). quiet Whether show messages. p_cft Counterfactual prevalence (proportion) exposed individuals N exposure levels. type Character either Potential Impact Fraction (PIF) Population Attributable Fraction (PAF)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"function assumes p beta pre-computed data individual-level data accessible researchers. either data individual-level prevalence exposure p data individual-level risk estimate beta can accessed researcher methods (pifpaf package preferred).","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"formulas","dir":"Reference","previous_headings":"","what":"Formulas","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"function computed potential impact fraction confidence intervals using Walter's formula: $$  \\dfrac{    \\sum\\limits_{=1}^N p_i \\text{RR}_i - \\sum\\limits_{=1}^N p_i^{\\text{cft}} \\text{RR}_i   }{    \\sum\\limits_{=1}^N p_i \\text{RR}_i   } $$ case N exposure categories equivalent Levine's formula 1 exposure category: $$  \\dfrac{    p (\\text{RR} - 1) - p^{\\text{cft}} (\\text{RR} - 1)   }{    1 + p (\\text{RR} - 1)   } $$","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"link-functions-for-the-pif","dir":"Reference","previous_headings":"","what":"Link functions for the PIF","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"default pif paf calculations use log-complement link guarantees impact fractions' intervals valid values (-oo 1). Depending application following link functions also implemented: log-complement achieve fractions (-Inf, 1). function f(x) = ln(1 - x) inverse finv(x) = 1 - exp(x) logit achieve strictly positive fractions (0,1). function f(x) = ln(x / (1 - x)) inverse finv(x) = 1 / (1 + exp(-x)) identity approximation --extreme fractions. function f(x) = x.inverse finv(x) = x hawkins Hawkins' fraction controlling variance. function f(x) = ln(x + sqrt(x^2 + 1)) inverse finv(x) = 0.5 * exp(-x) * (exp(2 * x) - 1) general, logit preferred known certain fractions can positive (.e. relative risks (including CIs) > 1 prevalence > 0 epidemiological / biological explanation). Mathematically variance calculated $$ \\sigma_f^2 = \\text{Var}\\Big[ f(\\textrm{PIF}) \\Big] $$ intervals constructed : $$ \\text{CI} = f^{-1}\\Big(  f(\\textrm{PIF})  \\pm Z_{\\alpha/2} \\cdot \\sigma_f \\Big) $$ Custom link functions can implemented long invertible range interest providing function link, inverse link_inv derivative link_deriv. derivative provided package attempt estimate symbolically using Deriv::Deriv() however guarantee work non-standard functions (.e. logarithm / trigonometric / exponential)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"link-functions-for-beta","dir":"Reference","previous_headings":"","what":"Link functions for beta","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"default pif paf use identity link means values beta relative risks directly variance var_beta corresponds relative risk's variance. Depending relative risk's source following options available: identity approximation --extreme fractions. function f(beta) = beta.inverse finv(rr) = rr = beta exponential exponential function f(beta) = exp(beta) inverse finv(rr) = log(rr) = beta previous section, custom link functions can implemented long invertible range interest providing function rr_link derivative rr_link_deriv. derivative provided package attempt estimate symbolically using Deriv::Deriv() however guarantee work non-standard functions (.e. logarithm / trigonometric / exponential)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"population-attributable-fraction","dir":"Reference","previous_headings":"","what":"Population Attributable Fraction","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"population attributable fraction corresponds potential impact fraction theoretical minimum risk level. assumed theoretical minimum risk level relative risk 1. counterfactual prevalence p_cft specified, model computes population attributable fraction.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/pifpaf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Potential Impact fraction and Population Attributable Fraction — pifpaf","text":"","code":"# This example comes from Levin 1953 # Relative risk of lung cancer given smoking was 3.6 # Proportion of individuals smoking where 49.9% # Calculates PAF (i.e. counterfactual is no smoking) paf(p = 0.499, beta = 3.6) #> ! Assuming parameters `p` have no variance Use `var_p` to input their link_variances and/or covariance #> ! Assuming parameters `beta` have no variance Use `var_beta` to input their link_variances and/or covariance #>  #> ── Population Attributable Fraction ── #>  #> PAF = 56.473% [95% CI: 56.473% to 56.473%] #> standard_deviation(paf %) = 0.000 #> standard_deviation(link(paf)) = 0.000  # Assuming that beta and p had a link_variance paf(p = 0.499, beta = 3.6, var_p = 0.001, var_beta = 1) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 56.473% [95% CI: 32.990% to 71.726%] #> standard_deviation(paf %) = 9.582 #> standard_deviation(link(paf)) = 0.220  # If the link_variance was to high a logistic transform would be required # Generates incorrect values for the interval: paf(p = 0.499, beta = 3.6, var_p = 0.1, var_beta = 3) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 56.473% [95% CI: -20.431% to 84.268%] #> standard_deviation(paf %) = 22.601 #> standard_deviation(link(paf)) = 0.519  # Logit fixes it paf(p = 0.499, beta = 3.6, var_p = 0.1, var_beta = 3,     link = \"logit\", quiet = TRUE) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 56.473% [95% CI: 17.628% to 88.720%] #> standard_deviation(paf %) = 22.601 #> standard_deviation(link(paf)) = 0.919  # If the counterfactual was reducing the smoking population by 1/2 pif(p = 0.499, beta = 1.6, p_cft = 0.499/2, var_p = 0.001,     var_beta = 1, link = \"logit\", quiet = TRUE) #>  #> ── Potential Impact Fraction ── #>  #> PIF = 11.521% [95% CI: 0.746% to 69.285%] #> standard_deviation(pif %) = 14.833 #> standard_deviation(link(pif)) = 1.455"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print or show a potential impact fraction — print","title":"Print or show a potential impact fraction — print","text":"Function print show potential impact fraction object","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print or show a potential impact fraction — print","text":"x pif_class ... Additional arguments pass print show. accuracy accuracy printed value","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print or show a potential impact fraction — print","text":"","code":"my_pif <- pif(p = 0.2, beta = 1.3, var_beta = 0.1) #> ! Assuming parameters `p` have no variance Use `var_p` to input their link_variances and/or covariance print(my_pif) #>  #> ── Potential Impact Fraction ── #>  #> PIF = 5.660% [95% CI: -6.043% to 16.072%] #> standard_deviation(pif %) = 5.629 #> standard_deviation(link(pif)) = 0.060  # Change the ammount of digits to show just 1 print(my_pif, accuracy = 0.1) #>  #> ── Potential Impact Fraction ── #>  #> PIF = 5.7% [95% CI: -6.0% to 16.1%] #> standard_deviation(pif %) = 5.6 #> standard_deviation(link(pif)) = 0.1"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/print_pif_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a pif_class — print_pif_class","title":"Print a pif_class — print_pif_class","text":"Prints pif_class object.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/print_pif_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a pif_class — print_pif_class","text":"","code":"print_pif_class(x, accuracy)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/print_pif_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a pif_class — print_pif_class","text":"x pif_class accuracy accuracy parameter scales::percent.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/print_pif_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a pif_class — print_pif_class","text":"Called side-effects printing console","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Setters — setters","title":"Setters — setters","text":"Collection functions potential impact fraction class work setters properties. function constructed set_property","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setters — setters","text":"self pif_class object created S7.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a pif object — summary","title":"Summary of a pif object — summary","text":"Gets potential impact fraction summary","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a pif object — summary","text":"object pif_class object. ... Additional parameters pass summary (ignored)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of a pif object — summary","text":"","code":"my_pif <- pif(p = 0.5, p_cft = 0.25, beta = 1.3, var_p = 0.1, var_beta = 0.2) summary(my_pif) #>                PIF standard_deviation             ci_low              ci_up  #>         0.06521739         0.11442686        -0.18824588         0.26461472  #>         confidence  #>         0.95000000"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/totalpifpaf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Potential Impact Fractions and Population Attributable Fractions — totalpifpaf","title":"Combine Potential Impact Fractions and Population Attributable Fractions — totalpifpaf","text":"Combine potential impact fractions population attributable fractions either generate total fraction fractions subpopulations (pif_total/paf_total) ensemble fraction population different (independent) exposures.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/totalpifpaf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Potential Impact Fractions and Population Attributable Fractions — totalpifpaf","text":"","code":"paf_total(   paf1,   ...,   weights,   sigma_weights = 0,   conf_level = 0.95,   link = \"log-complement\",   link_inv = NULL,   link_deriv = NULL,   quiet = FALSE )  pif_total(   pif1,   ...,   weights,   sigma_weights = 0,   conf_level = 0.95,   link = \"log-complement\",   link_inv = NULL,   link_deriv = NULL,   quiet = FALSE )  pif_ensemble(pif1, ..., conf_level = 0.95, quiet = FALSE)"},{"path":"https://rodrigozepeda.github.io/deltapif/reference/totalpifpaf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Potential Impact Fractions and Population Attributable Fractions — totalpifpaf","text":"paf1 population attributable fraction (class pif_class) ... remaining potential impact fractions (respectively) population attributable fractions. weights vector containing proportion population categories (pifs given). sigma_weights Colink_variance structure weights. Can 0 (default) weights random, vector link_variances weights available colink_variance matrix. conf_level Confidence level confidence interval (default 0.95). link Link function pif confidence intervals stays within expected bounds. link_inv inverse link. example link logit inv_logit. link_deriv Derivative link function. function tries build automatically link using Deriv::Deriv(). quiet Whether show messages. pif1 potential impact fraction (class pif_class)","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/totalpifpaf.html","id":"total-potential-impact-fraction","dir":"Reference","previous_headings":"","what":"Total potential impact fraction","title":"Combine Potential Impact Fractions and Population Attributable Fractions — totalpifpaf","text":"Assuming overall population can subdivided \\(N\\) distinct subpopulations different potential impact fraction (population attributable fraction) can estimate total population attributable fraction potential impact fraction whole population : $$  \\text{PIF}_{\\text{Total}} = \\sum\\limits_{= 1}^{N} \\pi_i \\cdot \\text{PIF}_i $$ \\(\\text{PIF}_i\\) corresponds potential impact fraction -th subpopulation \\(\\pi_i\\) correspond proportion total population occupied \\(\\text{PIF}_i\\). weights \\(\\sum_{=1}^{N} \\pi_i = 1\\).","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/totalpifpaf.html","id":"ensemble-potential-impact-fraction","dir":"Reference","previous_headings":"","what":"Ensemble potential impact fraction","title":"Combine Potential Impact Fractions and Population Attributable Fractions — totalpifpaf","text":"population exposed \\(K\\) different independent risk factors ensemble impact fraction combination factors can written : $$  \\text{PIF}_{\\text{Ensemble}} = 1 - \\prod\\limits_{\\ell = 1}^{K} \\Big(1 - \\cdot \\text{PIF}_{\\ell}\\Big) $$ \\(\\text{PIF}_{\\ell}\\) corresponds potential impact fraction \\(\\ell\\)-th risk factor population.","code":""},{"path":"https://rodrigozepeda.github.io/deltapif/reference/totalpifpaf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Potential Impact Fractions and Population Attributable Fractions — totalpifpaf","text":"","code":"#Potential impact fraction for women pif_women <- pif(0.32, 0.1, 1.2, quiet = TRUE, var_p = 0.1)  #Potential impact fraction for men pif_men <- pif(0.27, 0.1, 1.3, quiet = TRUE, var_p = 0.1)  #Population potential impact fraction with 49% men and 51% women pif_total(pif_men, pif_women, weights = c(0.49, 0.51), link = \"logit\") #>  #> ── Potential Impact Fraction ── #>  #> PIF = 4.421% [95% CI: 0.179% to 54.364%] #> standard_deviation(pif %) = 7.003 #> standard_deviation(link(pif)) = 1.657  #Population attributable  fraction for women paf_women <- paf(0.32, 1.3, quiet = TRUE, var_p = 0.1)  #Population attributable  fraction for men paf_men <- paf(0.27, 1.3, quiet = TRUE, var_p = 0.1) paf_total(paf_men, paf_women, weights = c(0.49, 0.51), link = \"logit\") #>  #> ── Population Attributable Fraction ── #>  #> PAF = 8.139% [95% CI: 1.075% to 41.949%] #> standard_deviation(paf %) = 8.006 #> standard_deviation(link(paf)) = 1.071  # Calculate the ensemble from lead and radiation exposure paf_lead <- paf(0.2, 2.2, quiet = TRUE, var_p = 0.001) paf_rad  <- paf(0.1, 1.2, quiet = TRUE, var_p = 0.0001) pif_ensemble(paf_lead, paf_rad) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 0.380% [95% CI: -7.002% to 7.252%] #> standard_deviation(paf %) = 3.633 #> standard_deviation(link(paf)) = 0.036  # Totals and ensembles can be combined pif_lead_women <- paf(0.27, 2.2, quiet = TRUE, var_p = 0.001) pif_rad_women  <- paf(0.12, 1.2, quiet = TRUE, var_p = 0.001) pif_women      <- pif_ensemble(pif_lead_women, pif_rad_women) pif_lead_men   <- paf(0.30, 2.2, quiet = TRUE, var_p = 0.001) pif_rad_men    <- paf(0.10, 1.2, quiet = TRUE, var_p = 0.001) pif_men        <- pif_ensemble(pif_lead_men, pif_rad_men)  pif_total(pif_men, pif_women, weights = c(0.49, 0.51)) #>  #> ── Population Attributable Fraction ── #>  #> PAF = 0.547% [95% CI: -4.919% to 5.728%] #> standard_deviation(paf %) = 2.715 #> standard_deviation(link(paf)) = 0.027"}]
